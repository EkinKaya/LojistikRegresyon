# -*- coding: utf-8 -*-
"""210601076 MakineÖğrenmesiÖdev1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14dBx7LKTq-xljSUolVpe4pIWBWLK89FH
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.datasets import load_wine
wine = load_wine()

X = wine.data
y = wine.target

print(wine.data)
print(wine.target)

print(wine.target_names)

print(X.shape)
print(y.shape)

df = pd.DataFrame({"x1":X[:,0],
                   "x2":X[:,1],
                   "x3":X[:,2],
                   "x4":X[:,3],
                   "x5":X[:,4],
                   "x6":X[:,5],
                   "target":y})

print(df.head())

print(df.describe())

x_altOzellikler = X[:,0:3]
x_birinci = x_altOzellikler[y==0]
x_ikinci = x_altOzellikler[y==1]
x_ücüncü = x_altOzellikler[y==2]

import matplotlib.pyplot as plt
plt.scatter(x_birinci[:,0], x_birinci[:,1], color = 'red', marker = 'o', label = 'tür 1')
plt.scatter(x_ikinci[:,0], x_ikinci[:,1], color = 'blue', marker = 'x', label = 'tür 2')
plt.scatter(x_ücüncü[:,0], x_ücüncü[:,1], color = 'green', marker = '*', label = 'tür 3')
plt.xlabel('Özellik 1')
plt.ylabel('Özellik 2')
plt.legend(loc='upper left')
plt.show()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

print('Train dataset boyutu: ', x_train.shape)
print('Train çıkış boyutu: ', y_train.shape)
print('Test dataset boyutu: ', x_test.shape)
print('Test çıkış boyutu: ', y_test.shape)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression(random_state=False)
lr.fit(x_train_scaled, y_train)

from sklearn import metrics
y_pred = lr.predict(x_test)
print(metrics.confusion_matrix(y_test, y_pred))

print("Doğruluk oranı: ", metrics.accuracy_score(y_test, y_pred))

print(lr.coef_)
print(lr.intercept_)

tahmin = (5 * 0.69853977)  + (-7 * 0.98907933) + 0.29606777
print(tahmin)

def sigmoid(z):
    return 1.0/(1.0+np.exp(-z))

sonuc = sigmoid(tahmin)

print(sonuc)
if (sonuc>=0.5):
  print("tür1 ")
else:
  print("tür2 veya tür3 ")

print("1. türe ait olma olasılığı => ", sonuc)
print("2 veya 3. türe ait olma olasılığı => ", 1- sonuc)

y_head = lr.predict(x_test_scaled)
print("Gerçek Değerler:")
print(y_test)
print("Tahmin Edilen Değerler:")
print(y_head)

from sklearn.metrics import accuracy_score
print("Train Başarısı: %",accuracy_score(y_test,y_head))